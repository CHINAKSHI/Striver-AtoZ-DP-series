//Recursion
class Solution {
public:
    bool f(int i, int target,vector<int>& a){
        if(target==0){return true;}
        if (i==0) return (a[0]==target);

        bool nottake=0+f(i-1,target,a);
        bool take =false;
        if(target>=a[i]) take =f(i-1,target-a[i],a);

        return take || nottake;
    }
    bool canPartition(vector<int>& a) {
        int sum=0;
        int n=a.size();
        for(int i=0;i<n;i++){
            sum+=a[i];
        }
        if(sum%2==1) return false;
        int target = sum/2;
        return f(n-1, target ,a);
    }
};

//Memoization
class Solution {
public:
    bool f(int i, int target,vector<int>& a, vector<vector<int>> &dp){
        if(target==0){return true;}
        if (i==0) return (a[0]==target);
        if(dp[i][target]!=-1) return dp[i][target];

        bool nottake=0+f(i-1,target,a,dp);
        bool take =false;
        if(target>=a[i]) take =f(i-1,target-a[i],a,dp);

        return dp[i][target]=take || nottake;
    }
    bool canPartition(vector<int>& a) {
        int sum=0;
        int n=a.size();

        for(int i=0;i<n;i++){
            sum+=a[i];
        }
        if(sum%2==1) return false;
        int target = sum/2;

        vector<vector<int>> dp(n, vector<int>(target + 1, -1));
        return f(n-1, target ,a, dp);
    }
};

//Tabulation
class Solution {
public:
    bool canPartition(vector<int>& a) {
        int sum=0;
        int n=a.size();

        for(int i=0;i<n;i++){
            sum+=a[i];
        }
        if(sum%2==1) return false;
        int target = sum/2;

        vector<vector<bool>> dp(n, vector<bool>(target + 1, false));
        if(target==0){return true;}
        for(int j=0;j<target + 1;j++){
            dp[0][a[0]]=true;
            
        }
        for(int i=1;i<n;i++){
            for(int j=0;j<target+1;j++){
                bool nottake=0+dp[i-1][j];
                bool take =false;
                if(j>=a[i]) take =dp[i-1][j-a[i]];

                dp[i][j]=take || nottake;
            }
        }
        return dp[n-1][target];
    }
};

//space optimization
class Solution {
public:
    bool canPartition(vector<int>& a) {
        int sum=0;
        int n=a.size();

        for(int i=0;i<n;i++){
            sum+=a[i];
        }
        if(sum%2==1) return false;
        int target = sum/2;

        vector<bool> pre(target + 1,0), cur(target + 1,0);
        if(target==0){return true;}
        for(int j=0;j<target + 1;j++){
            pre[a[0]]=true;
            
        }
        for(int i=1;i<n;i++){
            for(int j=0;j<target+1;j++){
                bool nottake=0+pre[j];
                bool take =false;
                if(j>=a[i]) take =pre[j-a[i]];

                cur[j]=take || nottake;
            }
            pre=cur;
        }
        return pre[target];
    }
};
