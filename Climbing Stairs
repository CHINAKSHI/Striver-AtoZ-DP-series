//recursion
class Solution {
private:
    int f(int ind){
        if(ind==1){return 1;}
        if(ind==0){return 1;}

        int l=f(ind-1);
        int r=f(ind-2);

        return l+r;
    }
public:
    int climbStairs(int n) {
        return f(n); 
    }
};

//Memoization
class Solution {
private:
    int f(int ind, vector<int> &dp){
        if(ind==1){return 1;}
        if(ind==0){return 1;}
        if (dp[ind] != -1) return dp[ind];
        
        int l=f(ind-1,dp);
        int r=f(ind-2, dp);

        return l+r;
    }
public:
    int climbStairs(int n) {
        vector<int> dp(n + 1, -1);
        return f(n, dp); 
    }
};

//tabulation
class Solution {

public:
    int climbStairs(int n) {
        vector<int> dp(n + 1, -1);
        dp[0]=1;
        dp[1]=1;
        for(int i=2;i<=n;i++){     
            int l=dp[i-1];
            int r=dp[i-2];
            dp[i]=l+r;
        }
        return dp[n];
    }
};

//Space optimization
class Solution {

public:
    int climbStairs(int n) {
        
        int pre2=1;
        int pre=1;
        for(int i=2;i<=n;i++){     
            int l=pre;
            int r=pre2;
            pre2=pre;
            pre=l+r;
        }
        return pre;
    }
};
