//Recursion
class Solution {
public:
    int f(int i,int n,int buy, vector<int>& a, int cap){
        if(i==n) return 0;
        if(cap==0) return 0;
        int profit=0;

        if(buy){
            return max(-a[i]+f(i+1,n,0,a, cap),0+f(i+1,n,1,a, cap));
        }else{
            return max(a[i]+f(i+1,n,1,a, cap-1),0+f(i+1,n,0,a, cap));
        }
    }

    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        return f(0,n,1,prices, 2);
    }
};

//Tabulation
int maxProfit(vector<int>& prices) {
        int n=prices.size();
        vector<vector<vector<int>>> dp(n+1, vector<vector<int>>(2, vector<int>(3, -1)));

        for(int j=0;j<2;j++){
            for(int k=0;k<3;k++){
                dp[n][j][k]=0;
            }
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<=1;j++){
                dp[i][j][0]=0;
            }
        }
        for(int i=n-1;i>=0;i--){
            for(int j=0;j<=1;j++){
                for(int k=1;k<3;k++){
                    if(j==1){
                        dp[i][j][k]=max(-prices[i]+dp[i+1][0][k], dp[i+1][1][k]);
                    }else{
                        dp[i][j][k]=max(prices[i]+dp[i+1][1][k-1], dp[i+1][0][k]);
                    }
                }
            }
        }
        return dp[0][1][2];
    }

//Space optimization
int maxProfit(vector<int>& prices) {
        int n=prices.size();
        vector<vector<int>> ahead(2, vector<int>(3,-1));

        for(int j=0;j<2;j++){
            for(int k=0;k<3;k++){
                ahead[j][k]=0;
            }
        }

        for(int i=n-1;i>=0;i--){
            vector<vector<int>> cur(2, vector<int>(3, 0)); 
            for(int j=0;j<=1;j++){
                for(int k=1;k<3;k++){
                    if(j==1){
                        cur[j][k]=max(-prices[i]+ahead[0][k], ahead[1][k]);
                    }else{
                        cur[j][k]=max(prices[i]+ahead[1][k-1], ahead[0][k]);
                    }
                }
            }
            ahead =cur;
        }
        return ahead[1][2];
    }

