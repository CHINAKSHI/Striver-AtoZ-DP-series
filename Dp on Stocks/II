//Recursion
class Solution {
public:
    int f(int i,int n,int buy, vector<int>& a){
        if(i==n) return 0;
        int profit=0;

        if(buy){
            return max(-a[i]+f(i+1,n,0,a),0+f(i+1,n,1,a));
        }else{
            return max(a[i]+f(i+1,n,1,a),0+f(i+1,n,0,a));
        }
    }

    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        return f(0,n,1,prices);
    }
};

//Memoization
class Solution {
public:
    int f(int i,int n,int buy, vector<int>& a,vector<vector<int>> &dp){
        if(i==n) return 0;
        int profit=0;
        if(dp[i][buy]!=-1){
            return dp[i][buy];
        }

        if(buy){
            return dp[i][buy]= max(-a[i]+f(i+1,n,0,a , dp),0+f(i+1,n,1,a, dp));
        }else{
            return dp[i][buy]= max(a[i]+f(i+1,n,1,a, dp),0+f(i+1,n,0,a, dp));
        }
    }

    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        vector<vector<int>> dp(n,vector<int> (2,-1));
        return f(0,n,1,prices, dp);
    }
};

//Tabualtion
int maxProfit(vector<int>& prices) {
        int n=prices.size();
        vector<vector<int>> dp(n+1,vector<int> (2,-1));

        dp[n][1]=dp[n][0]= 0;
        
        for(int i=n-1;i>=0;i--){
            for(int j=0;j<=1; j++){
                if(j==1){
                    dp[i][j]= max(-prices[i]+dp[i+1][0],0+dp[i+1][1]);
                }else{
                    dp[i][j]= max(prices[i]+dp[i+1][1],0+dp[i+1][0]);
                }
            }
        }
        return dp[0][1];
    }

//Space Optimization
int maxProfit(vector<int>& prices) {
        int n=prices.size();
        vector<int> ahead(2,0), cur(2,0);

        ahead[1]=ahead[0]= 0;
        
        for(int i=n-1;i>=0;i--){
            for(int j=0;j<=1; j++){
                if(j==1){
                    cur[j]= max(-prices[i]+ahead[0],0+ahead[1]);
                }else{
                    cur[j]= max(prices[i]+ahead[1],0+ ahead[0]);
                }
            }
            ahead=cur;
        }
        return ahead[1];
    }
