//Recursion
class Solution {
public:
    int f(int i, int j, string s, string t){
    if(i==0 && j==0) return 1;
        if(j==0) return 1;
        if(i==0) return 0;

        if(s[i-1]==t[j-1]){
            return f(i-1,j,s,t)+f(i-1,j-1,s,t);
        }else{
            return f(i-1,j,s,t);
        }
    }
    int numDistinct(string s, string t) {
        int n=s.size();
        int m=t.size();
        return f(n,m,s,t);
    }
};

//Tabulation
int numDistinct(string s, string t) {
        int n=s.size();
        int m=t.size();
        vector<vector<unsigned long long>> dp(n+1,vector<unsigned long long> (m+1,0));
        
        for(int i=0;i<=n;i++){
            dp[i][0]=1;  //Empty t can be matched by any i in s
        }
        for(int i=1;i<=m;i++){
            dp[0][i]=0; //dp[0][0]=1 but is loop me overwrite 0 ho jaega so
        }
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(s[i-1]==t[j-1]){
                    dp[i][j]= dp[i-1][j]+dp[i-1][j-1];
                }else{
                    dp[i][j]= dp[i-1][j];
                }
            }
        }
        return static_cast<int>(dp[n][m]);
    }

//Space Optimization
int numDistinct(string s, string t) {
    int n=s.size();
    int m=t.size();
    vector<unsigned long long>pre(m+1,0);        
    pre[0]=1;  //Empty t can be matched by any i in s
    
    for(int i=1;i<=m;i++){
        pre[i]=0; //dp[0][0]=1 but is loop me overwrite 0 ho jaega so
    }
    for(int i=1;i<=n;i++){
        vector<unsigned long long> cur(m+1,0);
        cur[0] = 1; // Still only 1 way to form empty t
        for(int j=1;j<=m;j++){
            if(s[i-1]==t[j-1]){
                cur[j]= pre[j]+pre[j-1];
            }else{
                cur[j]= pre[j];
            }
        }
        pre=cur;
    }
    return static_cast<int>(pre[m]);
}
