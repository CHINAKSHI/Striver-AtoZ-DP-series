class Solution {
public:
    int f(int i, int j, string &s1, string &s2) {
        if(i<0) return j+1;
        if(j<0) return i+1;

        
        if(s1[i]==s2[j]) return f(i-1,j-1,s1,s2);
        else{
            int dlt=f(i-1,j,s1,s2);
            int ist=f(i,j-1 ,s1,s2);
            int rep=f(i-1,j-1 ,s1,s2);

            return 1+ min({dlt,ist,rep});

        }
    }
 
    int minDistance(string word1, string word2) {
        int n=word1.size();
        int m=word2.size();

        return f(n-1,m-1, word1, word2);
        }
};

//memoization
class Solution {
public:
    int f(int i, int j, string &s1, string &s2, vector<vector<int>>& dp) {
        if(i==0) return j;
        if(j==0) return i;
        if(dp[i][j]!=-1) return dp[i][j];
        
        if(s1[i-1]==s2[j-1]) return dp[i][j]= f(i-1,j-1,s1,s2, dp);
        else{
            int dlt=f(i-1,j,s1,s2, dp);
            int ist=f(i,j-1 ,s1,s2, dp);
            int rep=f(i-1,j-1 ,s1,s2, dp);

            return dp[i][j]= 1+ min({dlt,ist,rep});

        }
    }
 
    int minDistance(string word1, string word2) {
        int n=word1.size();
        int m=word2.size();

        vector<vector<int>> dp(n+1, vector<int> (m+1,-1));

        return f(n,m, word1, word2, dp);
        }
};
