//Recursion
class Solution {
    private:
    int f(int i,int j,vector<vector<int>>& a){
        int n=a.size();
        if(i==n-1) return a[n-1][j];

        int down=a[i][j]+f(i+1,j,a);
        int adj= a[i][j]+f(i+1,j+1,a);
        return min(down, adj);
    }
public:
    int minimumTotal(vector<vector<int>>& a) {
        int n=a.size();
        return f(0,0,a);
    }
};

//Memoization
class Solution {
    private:
    int f(int i,int j,vector<vector<int>>& a, vector<vector<int>> & dp){
        int n=a.size();
        if(i==n-1) return a[n-1][j];
        if(dp[i][j]!=-1) return dp[i][j];

        int down=a[i][j]+f(i+1,j,a,dp);
        int adj= a[i][j]+f(i+1,j+1,a,dp);
        return dp[i][j]=min(down, adj);
    }
public:
    int minimumTotal(vector<vector<int>>& a) {
        int n=a.size();
        vector<vector<int>> dp(n,vector<int> (n,-1));
        return f(0,0,a, dp);
    }
};

//Tabulation
class Solution {

public:
    int minimumTotal(vector<vector<int>>& a) {
        int n=a.size();
        vector<vector<int>> dp(n,vector<int> (n,-1));
        for(int j=0;j<n;j++){
            dp[n-1][j]=a[n-1][j];
        }
        for(int i=n-2;i>=0;i--){ //base case for n-1
            for(int j=i;j>=0;j--){
                int down=a[i][j]+dp[i+1][j];
                int adj= a[i][j]+dp[i+1][j+1];
                dp[i][j]=min(down, adj);
            }
        }
        return dp[0][0];
    }
};

//Space optimization
class Solution {

public:
    int minimumTotal(vector<vector<int>>& a) {
        int n=a.size();
        vector<int> front(n,-1);
        for(int j=0;j<n;j++){
            front[j]=a[n-1][j];
        }
        for(int i=n-2;i>=0;i--){ //base case for n-1
            vector<int> cur(n,-1);
            for(int j=i;j>=0;j--){
                int down=a[i][j]+front[j];
                int adj= a[i][j]+front[j+1];
                cur[j]=min(down, adj);
            }
            front=cur;
        }
        return front[0];
    }
};
