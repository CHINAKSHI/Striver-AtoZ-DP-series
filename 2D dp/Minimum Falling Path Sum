//Recursion
class Solution {
public:
    int f(int i, int j,int n, int m, vector<vector<int>>& a){
        if(j<0||j>=m) return 1e9;
        if(i==0)return a[0][j];

        int upleft=a[i][j] +f(i-1,j-1,n,m,a);
        int up=a[i][j] +f(i-1,j,n,m,a);
        int upright=a[i][j] +f(i-1,j+1,n,m,a);

        return min(upleft,min(up,upright));
    }
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int n=matrix.size();
        int m=matrix[0].size();
        int mini=1e9;
        for(int j=0;j<m;j++){
            mini=min(mini,f(n-1,j,n,m,matrix));
        }
        return mini;
    }
};

//Memoization
class Solution {
public:
    int f(int i, int j,int n, int m, vector<vector<int>>& a,vector<vector<int>> &dp){
        if(j<0||j>=m) return 1e9;
        if(i==0)return a[0][j];
        if(dp[i][j]!=-1) return dp[i][j];

        int upleft=a[i][j] +f(i-1,j-1,n,m,a, dp);
        int up=a[i][j] +f(i-1,j,n,m,a, dp);
        int upright=a[i][j] +f(i-1,j+1,n,m,a, dp);

        dp[i][j]=min(upleft,min(up,upright));
        return dp[i][j];
    }
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int n=matrix.size();
        int m=matrix[0].size();
        vector<vector<int>> dp(n, vector<int>(m, -1));  
        int mini=1e9;
        for(int j=0;j<m;j++){
            mini=min(mini,f(n-1,j,n,m,matrix, dp));
        }
        return mini;
    }
};

//Tabulation
class Solution {
public:
    int minFallingPathSum(vector<vector<int>>& a) {
        int n=a.size();
        int m=a[0].size();
        vector<vector<int>> dp(n, vector<int>(m, -1));  
        
        for(int j=0;j<m;j++){
            dp[0][j]=a[0][j];
        }
        for(int i=1;i<n;i++){
            for(int j=0;j<m;j++){
                int upleft, up, upright;
                if (j - 1 >= 0) upleft = dp[i - 1][j - 1];
                else upleft = 1e9;

                up = dp[i - 1][j];

                if (j + 1 < m) upright = dp[i - 1][j + 1];
                else upright = 1e9;
                

                dp[i][j]=a[i][j]+min(upleft,min(up,upright));
            }
        }
        int mini=dp[n-1][0];
        for(int j=1;j<m;j++){
            mini=min(mini,dp[n-1][j]);
        }
        return mini;
    }
};


//Space optimization
class Solution {
public:
    int minFallingPathSum(vector<vector<int>>& a) {
        int n=a.size();
        int m=a[0].size();
        vector<int> pre(m,0), cur(m,0);  
        
        for(int j=0;j<m;j++){
            pre[j]=a[0][j];
        }
        for(int i=1;i<n;i++){
            for(int j=0;j<m;j++){
                int upleft, up, upright;
                if (j - 1 >= 0) upleft = pre[j - 1];
                else upleft = 1e9;

                up = pre[j];

                if (j + 1 < m) upright = pre[j + 1];
                else upright = 1e9;
                

                cur[j]=a[i][j]+min(upleft,min(up,upright));
            }
            pre=cur;
        }
        int mini=pre[0];
        for(int j=1;j<m;j++){
            mini=min(mini,pre[j]);
        }
        return mini;
    }
};
